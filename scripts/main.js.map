{"version":3,"sources":["src/_scripts/node_modules/browser-pack/_prelude.js","src/_scripts/node_modules/keysim/dist/keysim.js","src/_scripts/main.js","src/_scripts/src/_scripts/main.js","src/_scripts/src/blasster/_js/classManipulation.js","src/_scripts/src/blasster/_modules/layout/layoutModal.js","src/_scripts/src/blasster/_modules/tags/tags.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","global","factory","define","amd","Keysim","this","isEditable","element","ownerDocument","designMode","toLowerCase","tagName","isEditableInput","isContentEditable","contentEditable","parentNode","input","type","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","CTRL","META","ALT","SHIFT","KeyEvents","DOWN","PRESS","UP","INPUT","ALL","Keystroke","modifiers","keyCode","ctrlKey","metaKey","altKey","shiftKey","Keyboard","charCodeKeyCodeMap","actionKeyCodeMap","_charCodeKeyCodeMap","_actionKeyCodeMap","value","keystroke","map","charCode","hasOwnProperty","keystrokeForCharCode","parseInt","document","window","defaultView","Event","event","createEvent","initEvent","data","String","fromCharCode","charCodeForKeystroke","which","action","keystrokeForAction","dispatchEventsForKeystroke","currentModifierState","charCodeAt","dispatchModifierStateTransition","transitionModifiers","arguments","undefined","events","keydownEvent","createEventFromKeystroke","dispatchEvent","targetCanReceiveTextInput","keypressEvent","textinputEvent","keyupEvent","fromModifierState","toModifierState","didHaveMeta","willHaveMeta","didHaveCtrl","willHaveCtrl","didHaveShift","willHaveShift","didHaveAlt","willHaveAlt","includeKeyUp","includeKeyDown","parts","split","lastPart","pop","forEach","part","toUpperCase","lastPartKeystroke","US_ENGLISH_CHARCODE_KEYCODE_MAP","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","US_ENGLISH_ACTION_KEYCODE_MAP","BACKSPACE","TAB","ENTER","PAUSE","CAPSLOCK","ESCAPE","PAGEUP","PAGEDOWN","END","HOME","LEFT","RIGHT","INSERT","DELETE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","US_ENGLISH","2","_interopRequireDefault","obj","__esModule","default","_layoutModal","_layoutModal2","_tags","_tags2","../blasster/_modules/layout/layoutModal","../blasster/_modules/tags/tags","3","addClass","el","className","classList","add","hasClass","removeClass","remove","reg","RegExp","replace","contains","match","4","_classCallCheck","_classManipulation","_classManipulation2","layoutModal","showModal","getElementsByClassName","hideModal","body","getElementsByTagName","onclick","id","getAttribute","getElementById","iframe","src","../../_js/classManipulation","5","_interopRequireWildcard","newObj","_keysim","keysim","tags","tag","search","keyboard","dispatchEventsForInput"],"mappings":"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","file":"scripts/main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.Keysim = global.Keysim || {})));\n}(this, function (exports) { 'use strict';\n\n  function isEditable (element) {\n    if (element.ownerDocument.designMode && element.ownerDocument.designMode.toLowerCase() === 'on') {\n      return true;\n    }\n\n    switch (element.tagName.toLowerCase()) {\n      case 'input':\n        return isEditableInput(element);\n      case 'textarea':\n        return true;\n    }\n\n    if (isContentEditable(element)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function isContentEditable(element) {\n    if (element.contentEditable && element.contentEditable.toLowerCase() === 'true') {\n      return true;\n    }\n    if (element.contentEditable && element.contentEditable.toLowerCase() === 'inherit' && element.parentNode) {\n      return isContentEditable(element.parentNode);\n    }\n    return false;\n  }\n\n  function isEditableInput(input) {\n    switch (input.type) {\n      case 'text':\n        return true;\n      case 'email':\n        return true;\n      case 'password':\n        return true;\n      case 'search':\n        return true;\n      case 'tel':\n        return true;\n      case 'url':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var CTRL = 1 << 0;\n  var META = 1 << 1;\n  var ALT = 1 << 2;\n  var SHIFT = 1 << 3;\n\n  // Key Events\n  var KeyEvents = {\n    DOWN: 1 << 0,\n    PRESS: 1 << 1,\n    UP: 1 << 2,\n    INPUT: 1 << 3\n  };\n  KeyEvents.ALL = KeyEvents.DOWN | KeyEvents.PRESS | KeyEvents.UP | KeyEvents.INPUT;\n\n  /**\n   * Represents a keystroke, or a single key code with a set of active modifiers.\n   *\n   * @class Keystroke\n   */\n  var Keystroke =\n  /**\n   * @param {number} modifiers A bitmask formed by CTRL, META, ALT, and SHIFT.\n   * @param {number} keyCode\n   */\n  function Keystroke(modifiers, keyCode) {\n    classCallCheck(this, Keystroke);\n\n    this.modifiers = modifiers;\n    this.ctrlKey = !!(modifiers & CTRL);\n    this.metaKey = !!(modifiers & META);\n    this.altKey = !!(modifiers & ALT);\n    this.shiftKey = !!(modifiers & SHIFT);\n    this.keyCode = keyCode;\n  }\n\n  /**\n   * Gets the bitmask value for the \"control\" modifier.\n   *\n   * @type {number}\n   */\n\n\n  /**\n   * Gets the bitmask value for the \"meta\" modifier.\n   *\n   * @return {number}\n   */\n\n\n  /**\n   * Gets the bitmask value for the \"alt\" modifier.\n   *\n   * @return {number}\n   */\n\n\n  /**\n   * Gets the bitmask value for the \"shift\" modifier.\n   *\n   * @return {number}\n   */\n  ;\n\n  /**\n   * Simulates a keyboard with a particular key-to-character and key-to-action\n   * mapping. Use `US_ENGLISH` to get a pre-configured keyboard.\n   */\n  Keystroke.CTRL = CTRL;\n  Keystroke.META = META;\n  Keystroke.ALT = ALT;\n  Keystroke.SHIFT = SHIFT;\n  var Keyboard = function () {\n    /**\n     * @param {Object.<number, Keystroke>} charCodeKeyCodeMap\n     * @param {Object.<string, number>} actionKeyCodeMap\n     */\n\n    function Keyboard(charCodeKeyCodeMap, actionKeyCodeMap) {\n      classCallCheck(this, Keyboard);\n\n      this._charCodeKeyCodeMap = charCodeKeyCodeMap;\n      this._actionKeyCodeMap = actionKeyCodeMap;\n    }\n\n    /**\n     * Determines the character code generated by pressing the given keystroke.\n     *\n     * @param {Keystroke} keystroke\n     * @return {?number}\n     */\n\n\n    createClass(Keyboard, [{\n      key: 'charCodeForKeystroke',\n      value: function charCodeForKeystroke(keystroke) {\n        var map = this._charCodeKeyCodeMap;\n        for (var charCode in map) {\n          if (Object.prototype.hasOwnProperty.call(map, charCode)) {\n            var keystrokeForCharCode = map[charCode];\n            if (keystroke.keyCode === keystrokeForCharCode.keyCode && keystroke.modifiers === keystrokeForCharCode.modifiers) {\n              return parseInt(charCode, 10);\n            }\n          }\n        }\n        return null;\n      }\n\n      /**\n       * Creates an event ready for dispatching onto the given target.\n       *\n       * @param {string} type One of \"keydown\", \"keypress\", \"keyup\", or \"textInput\".\n       * @param {Keystroke} keystroke\n       * @param {HTMLElement} target\n       * @return {Event}\n       */\n\n    }, {\n      key: 'createEventFromKeystroke',\n      value: function createEventFromKeystroke(type, keystroke, target) {\n        var document = target.ownerDocument;\n        var window = document.defaultView;\n        var Event = window.Event;\n\n        var event = void 0;\n\n        try {\n          event = new Event(type);\n        } catch (e) {\n          event = document.createEvent('UIEvents');\n        }\n\n        event.initEvent(type, true, true);\n\n        switch (type) {\n          case 'textInput':\n            event.data = String.fromCharCode(this.charCodeForKeystroke(keystroke));\n            break;\n\n          case 'keydown':case 'keypress':case 'keyup':\n            event.shiftKey = keystroke.shiftKey;\n            event.altKey = keystroke.altKey;\n            event.metaKey = keystroke.metaKey;\n            event.ctrlKey = keystroke.ctrlKey;\n            event.keyCode = type === 'keypress' ? this.charCodeForKeystroke(keystroke) : keystroke.keyCode;\n            event.charCode = type === 'keypress' ? event.keyCode : 0;\n            event.which = event.keyCode;\n            break;\n        }\n\n        return event;\n      }\n\n      /**\n       * Fires the correct sequence of events on the given target as if the given\n       * action was undertaken by a human.\n       *\n       * @param {string} action e.g. \"alt+shift+left\" or \"backspace\"\n       * @param {HTMLElement} target\n       */\n\n    }, {\n      key: 'dispatchEventsForAction',\n      value: function dispatchEventsForAction(action, target) {\n        var keystroke = this.keystrokeForAction(action);\n        this.dispatchEventsForKeystroke(keystroke, target);\n      }\n\n      /**\n       * Fires the correct sequence of events on the given target as if the given\n       * input had been typed by a human.\n       *\n       * @param {string} input\n       * @param {HTMLElement} target\n       */\n\n    }, {\n      key: 'dispatchEventsForInput',\n      value: function dispatchEventsForInput(input, target) {\n        var currentModifierState = 0;\n        for (var i = 0, length = input.length; i < length; i++) {\n          var keystroke = this.keystrokeForCharCode(input.charCodeAt(i));\n          this.dispatchModifierStateTransition(target, currentModifierState, keystroke.modifiers);\n          this.dispatchEventsForKeystroke(keystroke, target, false);\n          currentModifierState = keystroke.modifiers;\n        }\n        this.dispatchModifierStateTransition(target, currentModifierState, 0);\n      }\n\n      /**\n       * Fires the correct sequence of events on the given target as if the given\n       * keystroke was performed by a human. When simulating, for example, typing\n       * the letter \"A\" (assuming a U.S. English keyboard) then the sequence will\n       * look like this:\n       *\n       *   keydown   keyCode=16 (SHIFT) charCode=0      shiftKey=true\n       *   keydown   keyCode=65 (A)     charCode=0      shiftKey=true\n       *   keypress  keyCode=65 (A)     charCode=65 (A) shiftKey=true\n       *   textInput data=A\n       *   keyup     keyCode=65 (A)     charCode=0      shiftKey=true\n       *   keyup     keyCode=16 (SHIFT) charCode=0      shiftKey=false\n       *\n       * If the keystroke would not cause a character to be input, such as when\n       * pressing alt+shift+left, the sequence looks like this:\n       *\n       *   keydown   keyCode=16 (SHIFT) charCode=0 altKey=false shiftKey=true\n       *   keydown   keyCode=18 (ALT)   charCode=0 altKey=true  shiftKey=true\n       *   keydown   keyCode=37 (LEFT)  charCode=0 altKey=true  shiftKey=true\n       *   keyup     keyCode=37 (LEFT)  charCode=0 altKey=true  shiftKey=true\n       *   keyup     keyCode=18 (ALT)   charCode=0 altKey=false shiftKey=true\n       *   keyup     keyCode=16 (SHIFT) charCode=0 altKey=false shiftKey=false\n       *\n       * To disable handling of modifier keys, call with `transitionModifers` set\n       * to false. Doing so will omit the keydown and keyup events associated with\n       * shift, ctrl, alt, and meta keys surrounding the actual keystroke.\n       *\n       * @param {Keystroke} keystroke\n       * @param {HTMLElement} target\n       * @param {boolean=} transitionModifiers\n       * @param {number} events\n       */\n\n    }, {\n      key: 'dispatchEventsForKeystroke',\n      value: function dispatchEventsForKeystroke(keystroke, target) {\n        var transitionModifiers = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n        var events = arguments.length <= 3 || arguments[3] === undefined ? KeyEvents.ALL : arguments[3];\n\n        if (transitionModifiers) {\n          this.dispatchModifierStateTransition(target, 0, keystroke.modifiers, events);\n        }\n\n        var keydownEvent = void 0;\n        if (events & KeyEvents.DOWN) {\n          keydownEvent = this.createEventFromKeystroke('keydown', keystroke, target);\n        }\n\n        if (keydownEvent && target.dispatchEvent(keydownEvent) && this.targetCanReceiveTextInput(target)) {\n          var keypressEvent = void 0;\n          if (events & KeyEvents.PRESS) {\n            keypressEvent = this.createEventFromKeystroke('keypress', keystroke, target);\n          }\n          if (keypressEvent && keypressEvent.charCode && target.dispatchEvent(keypressEvent)) {\n            if (events & KeyEvents.INPUT) {\n              var textinputEvent = this.createEventFromKeystroke('textInput', keystroke, target);\n              target.dispatchEvent(textinputEvent);\n            }\n          }\n        }\n\n        if (events & KeyEvents.UP) {\n          var keyupEvent = this.createEventFromKeystroke('keyup', keystroke, target);\n          target.dispatchEvent(keyupEvent);\n        }\n\n        if (transitionModifiers) {\n          this.dispatchModifierStateTransition(target, keystroke.modifiers, 0);\n        }\n      }\n\n      /**\n       * Transitions from one modifier state to another by dispatching key events.\n       *\n       * @param {EventTarget} target\n       * @param {number} fromModifierState\n       * @param {number} toModifierState\n       * @param {number} events\n       * @private\n       */\n\n    }, {\n      key: 'dispatchModifierStateTransition',\n      value: function dispatchModifierStateTransition(target, fromModifierState, toModifierState) {\n        var events = arguments.length <= 3 || arguments[3] === undefined ? KeyEvents.ALL : arguments[3];\n\n        var currentModifierState = fromModifierState;\n        var didHaveMeta = (fromModifierState & META) === META;\n        var willHaveMeta = (toModifierState & META) === META;\n        var didHaveCtrl = (fromModifierState & CTRL) === CTRL;\n        var willHaveCtrl = (toModifierState & CTRL) === CTRL;\n        var didHaveShift = (fromModifierState & SHIFT) === SHIFT;\n        var willHaveShift = (toModifierState & SHIFT) === SHIFT;\n        var didHaveAlt = (fromModifierState & ALT) === ALT;\n        var willHaveAlt = (toModifierState & ALT) === ALT;\n\n        var includeKeyUp = events & KeyEvents.UP;\n        var includeKeyDown = events & KeyEvents.DOWN;\n\n        if (includeKeyUp && didHaveMeta === true && willHaveMeta === false) {\n          // Release the meta key.\n          currentModifierState &= ~META;\n          target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.META), target));\n        }\n\n        if (includeKeyUp && didHaveCtrl === true && willHaveCtrl === false) {\n          // Release the ctrl key.\n          currentModifierState &= ~CTRL;\n          target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.CTRL), target));\n        }\n\n        if (includeKeyUp && didHaveShift === true && willHaveShift === false) {\n          // Release the shift key.\n          currentModifierState &= ~SHIFT;\n          target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.SHIFT), target));\n        }\n\n        if (includeKeyUp && didHaveAlt === true && willHaveAlt === false) {\n          // Release the alt key.\n          currentModifierState &= ~ALT;\n          target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.ALT), target));\n        }\n\n        if (includeKeyDown && didHaveMeta === false && willHaveMeta === true) {\n          // Press the meta key.\n          currentModifierState |= META;\n          target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.META), target));\n        }\n\n        if (includeKeyDown && didHaveCtrl === false && willHaveCtrl === true) {\n          // Press the ctrl key.\n          currentModifierState |= CTRL;\n          target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.CTRL), target));\n        }\n\n        if (includeKeyDown && didHaveShift === false && willHaveShift === true) {\n          // Press the shift key.\n          currentModifierState |= SHIFT;\n          target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.SHIFT), target));\n        }\n\n        if (includeKeyDown && didHaveAlt === false && willHaveAlt === true) {\n          // Press the alt key.\n          currentModifierState |= ALT;\n          target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.ALT), target));\n        }\n\n        if (currentModifierState !== toModifierState) {\n          throw new Error('internal error, expected modifier state: ' + toModifierState + (', got: ' + currentModifierState));\n        }\n      }\n\n      /**\n       * Returns the keystroke associated with the given action.\n       *\n       * @param {string} action\n       * @return {?Keystroke}\n       */\n\n    }, {\n      key: 'keystrokeForAction',\n      value: function keystrokeForAction(action) {\n        var keyCode = null;\n        var modifiers = 0;\n\n        var parts = action.split('+');\n        var lastPart = parts.pop();\n\n        parts.forEach(function (part) {\n          switch (part.toUpperCase()) {\n            case 'CTRL':\n              modifiers |= CTRL;break;\n            case 'META':\n              modifiers |= META;break;\n            case 'ALT':\n              modifiers |= ALT;break;\n            case 'SHIFT':\n              modifiers |= SHIFT;break;\n            default:\n              throw new Error('in \"' + action + '\", invalid modifier: ' + part);\n          }\n        });\n\n        if (lastPart.toUpperCase() in this._actionKeyCodeMap) {\n          keyCode = this._actionKeyCodeMap[lastPart.toUpperCase()];\n        } else if (lastPart.length === 1) {\n          var lastPartKeystroke = this.keystrokeForCharCode(lastPart.charCodeAt(0));\n          modifiers |= lastPartKeystroke.modifiers;\n          keyCode = lastPartKeystroke.keyCode;\n        } else {\n          throw new Error('in \"' + action + '\", invalid action: ' + lastPart);\n        }\n\n        return new Keystroke(modifiers, keyCode);\n      }\n\n      /**\n       * Gets the keystroke used to generate the given character code.\n       *\n       * @param {number} charCode\n       * @return {?Keystroke}\n       */\n\n    }, {\n      key: 'keystrokeForCharCode',\n      value: function keystrokeForCharCode(charCode) {\n        return this._charCodeKeyCodeMap[charCode] || null;\n      }\n\n      /**\n       * @param {EventTarget} target\n       * @private\n       */\n\n    }, {\n      key: 'targetCanReceiveTextInput',\n      value: function targetCanReceiveTextInput(target) {\n        if (!target) {\n          return false;\n        }\n\n        return isEditable(target);\n      }\n    }]);\n    return Keyboard;\n  }();\n\n  var US_ENGLISH_CHARCODE_KEYCODE_MAP = {\n    32: new Keystroke(0, 32), // <space>\n    33: new Keystroke(SHIFT, 49), // !\n    34: new Keystroke(SHIFT, 222), // \"\n    35: new Keystroke(SHIFT, 51), // #\n    36: new Keystroke(SHIFT, 52), // $\n    37: new Keystroke(SHIFT, 53), // %\n    38: new Keystroke(SHIFT, 55), // &\n    39: new Keystroke(0, 222), // '\n    40: new Keystroke(SHIFT, 57), // (\n    41: new Keystroke(SHIFT, 48), // )\n    42: new Keystroke(SHIFT, 56), // *\n    43: new Keystroke(SHIFT, 187), // +\n    44: new Keystroke(0, 188), // ,\n    45: new Keystroke(0, 189), // -\n    46: new Keystroke(0, 190), // .\n    47: new Keystroke(0, 191), // /\n    48: new Keystroke(0, 48), // 0\n    49: new Keystroke(0, 49), // 1\n    50: new Keystroke(0, 50), // 2\n    51: new Keystroke(0, 51), // 3\n    52: new Keystroke(0, 52), // 4\n    53: new Keystroke(0, 53), // 5\n    54: new Keystroke(0, 54), // 6\n    55: new Keystroke(0, 55), // 7\n    56: new Keystroke(0, 56), // 8\n    57: new Keystroke(0, 57), // 9\n    58: new Keystroke(SHIFT, 186), // :\n    59: new Keystroke(0, 186), // ;\n    60: new Keystroke(SHIFT, 188), // <\n    61: new Keystroke(0, 187), // =\n    62: new Keystroke(SHIFT, 190), // >\n    63: new Keystroke(SHIFT, 191), // ?\n    64: new Keystroke(SHIFT, 50), // @\n    65: new Keystroke(SHIFT, 65), // A\n    66: new Keystroke(SHIFT, 66), // B\n    67: new Keystroke(SHIFT, 67), // C\n    68: new Keystroke(SHIFT, 68), // D\n    69: new Keystroke(SHIFT, 69), // E\n    70: new Keystroke(SHIFT, 70), // F\n    71: new Keystroke(SHIFT, 71), // G\n    72: new Keystroke(SHIFT, 72), // H\n    73: new Keystroke(SHIFT, 73), // I\n    74: new Keystroke(SHIFT, 74), // J\n    75: new Keystroke(SHIFT, 75), // K\n    76: new Keystroke(SHIFT, 76), // L\n    77: new Keystroke(SHIFT, 77), // M\n    78: new Keystroke(SHIFT, 78), // N\n    79: new Keystroke(SHIFT, 79), // O\n    80: new Keystroke(SHIFT, 80), // P\n    81: new Keystroke(SHIFT, 81), // Q\n    82: new Keystroke(SHIFT, 82), // R\n    83: new Keystroke(SHIFT, 83), // S\n    84: new Keystroke(SHIFT, 84), // T\n    85: new Keystroke(SHIFT, 85), // U\n    86: new Keystroke(SHIFT, 86), // V\n    87: new Keystroke(SHIFT, 87), // W\n    88: new Keystroke(SHIFT, 88), // X\n    89: new Keystroke(SHIFT, 89), // Y\n    90: new Keystroke(SHIFT, 90), // Z\n    91: new Keystroke(0, 219), // [\n    92: new Keystroke(0, 220), // \\\n    93: new Keystroke(0, 221), // ]\n    96: new Keystroke(0, 192), // `\n    97: new Keystroke(0, 65), // a\n    98: new Keystroke(0, 66), // b\n    99: new Keystroke(0, 67), // c\n    100: new Keystroke(0, 68), // d\n    101: new Keystroke(0, 69), // e\n    102: new Keystroke(0, 70), // f\n    103: new Keystroke(0, 71), // g\n    104: new Keystroke(0, 72), // h\n    105: new Keystroke(0, 73), // i\n    106: new Keystroke(0, 74), // j\n    107: new Keystroke(0, 75), // k\n    108: new Keystroke(0, 76), // l\n    109: new Keystroke(0, 77), // m\n    110: new Keystroke(0, 78), // n\n    111: new Keystroke(0, 79), // o\n    112: new Keystroke(0, 80), // p\n    113: new Keystroke(0, 81), // q\n    114: new Keystroke(0, 82), // r\n    115: new Keystroke(0, 83), // s\n    116: new Keystroke(0, 84), // t\n    117: new Keystroke(0, 85), // u\n    118: new Keystroke(0, 86), // v\n    119: new Keystroke(0, 87), // w\n    120: new Keystroke(0, 88), // x\n    121: new Keystroke(0, 89), // y\n    122: new Keystroke(0, 90), // z\n    123: new Keystroke(SHIFT, 219), // {\n    124: new Keystroke(SHIFT, 220), // |\n    125: new Keystroke(SHIFT, 221), // }\n    126: new Keystroke(SHIFT, 192) // ~\n  };\n\n  var US_ENGLISH_ACTION_KEYCODE_MAP = {\n    BACKSPACE: 8,\n    TAB: 9,\n    ENTER: 13,\n    SHIFT: 16,\n    CTRL: 17,\n    ALT: 18,\n    PAUSE: 19,\n    CAPSLOCK: 20,\n    ESCAPE: 27,\n    PAGEUP: 33,\n    PAGEDOWN: 34,\n    END: 35,\n    HOME: 36,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n    INSERT: 45,\n    DELETE: 46,\n    META: 91,\n    F1: 112,\n    F2: 113,\n    F3: 114,\n    F4: 115,\n    F5: 116,\n    F6: 117,\n    F7: 118,\n    F8: 119,\n    F9: 120,\n    F10: 121,\n    F11: 122,\n    F12: 123\n  };\n\n  /**\n   * Gets a keyboard instance configured as a U.S. English keyboard would be.\n   *\n   * @return {Keyboard}\n   */\n  Keyboard.US_ENGLISH = new Keyboard(US_ENGLISH_CHARCODE_KEYCODE_MAP, US_ENGLISH_ACTION_KEYCODE_MAP);\n\n  exports.KeyEvents = KeyEvents;\n  exports.Keystroke = Keystroke;\n  exports.Keyboard = Keyboard;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.Keysim = global.Keysim || {})));\n}(this, function (exports) { 'use strict';\n\n  function isEditable (element) {\n    if (element.ownerDocument.designMode && element.ownerDocument.designMode.toLowerCase() === 'on') {\n      return true;\n    }\n\n    switch (element.tagName.toLowerCase()) {\n      case 'input':\n        return isEditableInput(element);\n      case 'textarea':\n        return true;\n    }\n\n    if (isContentEditable(element)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function isContentEditable(element) {\n    if (element.contentEditable && element.contentEditable.toLowerCase() === 'true') {\n      return true;\n    }\n    if (element.contentEditable && element.contentEditable.toLowerCase() === 'inherit' && element.parentNode) {\n      return isContentEditable(element.parentNode);\n    }\n    return false;\n  }\n\n  function isEditableInput(input) {\n    switch (input.type) {\n      case 'text':\n        return true;\n      case 'email':\n        return true;\n      case 'password':\n        return true;\n      case 'search':\n        return true;\n      case 'tel':\n        return true;\n      case 'url':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var CTRL = 1 << 0;\n  var META = 1 << 1;\n  var ALT = 1 << 2;\n  var SHIFT = 1 << 3;\n\n  // Key Events\n  var KeyEvents = {\n    DOWN: 1 << 0,\n    PRESS: 1 << 1,\n    UP: 1 << 2,\n    INPUT: 1 << 3\n  };\n  KeyEvents.ALL = KeyEvents.DOWN | KeyEvents.PRESS | KeyEvents.UP | KeyEvents.INPUT;\n\n  /**\n   * Represents a keystroke, or a single key code with a set of active modifiers.\n   *\n   * @class Keystroke\n   */\n  var Keystroke =\n  /**\n   * @param {number} modifiers A bitmask formed by CTRL, META, ALT, and SHIFT.\n   * @param {number} keyCode\n   */\n  function Keystroke(modifiers, keyCode) {\n    classCallCheck(this, Keystroke);\n\n    this.modifiers = modifiers;\n    this.ctrlKey = !!(modifiers & CTRL);\n    this.metaKey = !!(modifiers & META);\n    this.altKey = !!(modifiers & ALT);\n    this.shiftKey = !!(modifiers & SHIFT);\n    this.keyCode = keyCode;\n  }\n\n  /**\n   * Gets the bitmask value for the \"control\" modifier.\n   *\n   * @type {number}\n   */\n\n\n  /**\n   * Gets the bitmask value for the \"meta\" modifier.\n   *\n   * @return {number}\n   */\n\n\n  /**\n   * Gets the bitmask value for the \"alt\" modifier.\n   *\n   * @return {number}\n   */\n\n\n  /**\n   * Gets the bitmask value for the \"shift\" modifier.\n   *\n   * @return {number}\n   */\n  ;\n\n  /**\n   * Simulates a keyboard with a particular key-to-character and key-to-action\n   * mapping. Use `US_ENGLISH` to get a pre-configured keyboard.\n   */\n  Keystroke.CTRL = CTRL;\n  Keystroke.META = META;\n  Keystroke.ALT = ALT;\n  Keystroke.SHIFT = SHIFT;\n  var Keyboard = function () {\n    /**\n     * @param {Object.<number, Keystroke>} charCodeKeyCodeMap\n     * @param {Object.<string, number>} actionKeyCodeMap\n     */\n\n    function Keyboard(charCodeKeyCodeMap, actionKeyCodeMap) {\n      classCallCheck(this, Keyboard);\n\n      this._charCodeKeyCodeMap = charCodeKeyCodeMap;\n      this._actionKeyCodeMap = actionKeyCodeMap;\n    }\n\n    /**\n     * Determines the character code generated by pressing the given keystroke.\n     *\n     * @param {Keystroke} keystroke\n     * @return {?number}\n     */\n\n\n    createClass(Keyboard, [{\n      key: 'charCodeForKeystroke',\n      value: function charCodeForKeystroke(keystroke) {\n        var map = this._charCodeKeyCodeMap;\n        for (var charCode in map) {\n          if (Object.prototype.hasOwnProperty.call(map, charCode)) {\n            var keystrokeForCharCode = map[charCode];\n            if (keystroke.keyCode === keystrokeForCharCode.keyCode && keystroke.modifiers === keystrokeForCharCode.modifiers) {\n              return parseInt(charCode, 10);\n            }\n          }\n        }\n        return null;\n      }\n\n      /**\n       * Creates an event ready for dispatching onto the given target.\n       *\n       * @param {string} type One of \"keydown\", \"keypress\", \"keyup\", or \"textInput\".\n       * @param {Keystroke} keystroke\n       * @param {HTMLElement} target\n       * @return {Event}\n       */\n\n    }, {\n      key: 'createEventFromKeystroke',\n      value: function createEventFromKeystroke(type, keystroke, target) {\n        var document = target.ownerDocument;\n        var window = document.defaultView;\n        var Event = window.Event;\n\n        var event = void 0;\n\n        try {\n          event = new Event(type);\n        } catch (e) {\n          event = document.createEvent('UIEvents');\n        }\n\n        event.initEvent(type, true, true);\n\n        switch (type) {\n          case 'textInput':\n            event.data = String.fromCharCode(this.charCodeForKeystroke(keystroke));\n            break;\n\n          case 'keydown':case 'keypress':case 'keyup':\n            event.shiftKey = keystroke.shiftKey;\n            event.altKey = keystroke.altKey;\n            event.metaKey = keystroke.metaKey;\n            event.ctrlKey = keystroke.ctrlKey;\n            event.keyCode = type === 'keypress' ? this.charCodeForKeystroke(keystroke) : keystroke.keyCode;\n            event.charCode = type === 'keypress' ? event.keyCode : 0;\n            event.which = event.keyCode;\n            break;\n        }\n\n        return event;\n      }\n\n      /**\n       * Fires the correct sequence of events on the given target as if the given\n       * action was undertaken by a human.\n       *\n       * @param {string} action e.g. \"alt+shift+left\" or \"backspace\"\n       * @param {HTMLElement} target\n       */\n\n    }, {\n      key: 'dispatchEventsForAction',\n      value: function dispatchEventsForAction(action, target) {\n        var keystroke = this.keystrokeForAction(action);\n        this.dispatchEventsForKeystroke(keystroke, target);\n      }\n\n      /**\n       * Fires the correct sequence of events on the given target as if the given\n       * input had been typed by a human.\n       *\n       * @param {string} input\n       * @param {HTMLElement} target\n       */\n\n    }, {\n      key: 'dispatchEventsForInput',\n      value: function dispatchEventsForInput(input, target) {\n        var currentModifierState = 0;\n        for (var i = 0, length = input.length; i < length; i++) {\n          var keystroke = this.keystrokeForCharCode(input.charCodeAt(i));\n          this.dispatchModifierStateTransition(target, currentModifierState, keystroke.modifiers);\n          this.dispatchEventsForKeystroke(keystroke, target, false);\n          currentModifierState = keystroke.modifiers;\n        }\n        this.dispatchModifierStateTransition(target, currentModifierState, 0);\n      }\n\n      /**\n       * Fires the correct sequence of events on the given target as if the given\n       * keystroke was performed by a human. When simulating, for example, typing\n       * the letter \"A\" (assuming a U.S. English keyboard) then the sequence will\n       * look like this:\n       *\n       *   keydown   keyCode=16 (SHIFT) charCode=0      shiftKey=true\n       *   keydown   keyCode=65 (A)     charCode=0      shiftKey=true\n       *   keypress  keyCode=65 (A)     charCode=65 (A) shiftKey=true\n       *   textInput data=A\n       *   keyup     keyCode=65 (A)     charCode=0      shiftKey=true\n       *   keyup     keyCode=16 (SHIFT) charCode=0      shiftKey=false\n       *\n       * If the keystroke would not cause a character to be input, such as when\n       * pressing alt+shift+left, the sequence looks like this:\n       *\n       *   keydown   keyCode=16 (SHIFT) charCode=0 altKey=false shiftKey=true\n       *   keydown   keyCode=18 (ALT)   charCode=0 altKey=true  shiftKey=true\n       *   keydown   keyCode=37 (LEFT)  charCode=0 altKey=true  shiftKey=true\n       *   keyup     keyCode=37 (LEFT)  charCode=0 altKey=true  shiftKey=true\n       *   keyup     keyCode=18 (ALT)   charCode=0 altKey=false shiftKey=true\n       *   keyup     keyCode=16 (SHIFT) charCode=0 altKey=false shiftKey=false\n       *\n       * To disable handling of modifier keys, call with `transitionModifers` set\n       * to false. Doing so will omit the keydown and keyup events associated with\n       * shift, ctrl, alt, and meta keys surrounding the actual keystroke.\n       *\n       * @param {Keystroke} keystroke\n       * @param {HTMLElement} target\n       * @param {boolean=} transitionModifiers\n       * @param {number} events\n       */\n\n    }, {\n      key: 'dispatchEventsForKeystroke',\n      value: function dispatchEventsForKeystroke(keystroke, target) {\n        var transitionModifiers = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n        var events = arguments.length <= 3 || arguments[3] === undefined ? KeyEvents.ALL : arguments[3];\n\n        if (transitionModifiers) {\n          this.dispatchModifierStateTransition(target, 0, keystroke.modifiers, events);\n        }\n\n        var keydownEvent = void 0;\n        if (events & KeyEvents.DOWN) {\n          keydownEvent = this.createEventFromKeystroke('keydown', keystroke, target);\n        }\n\n        if (keydownEvent && target.dispatchEvent(keydownEvent) && this.targetCanReceiveTextInput(target)) {\n          var keypressEvent = void 0;\n          if (events & KeyEvents.PRESS) {\n            keypressEvent = this.createEventFromKeystroke('keypress', keystroke, target);\n          }\n          if (keypressEvent && keypressEvent.charCode && target.dispatchEvent(keypressEvent)) {\n            if (events & KeyEvents.INPUT) {\n              var textinputEvent = this.createEventFromKeystroke('textInput', keystroke, target);\n              target.dispatchEvent(textinputEvent);\n            }\n          }\n        }\n\n        if (events & KeyEvents.UP) {\n          var keyupEvent = this.createEventFromKeystroke('keyup', keystroke, target);\n          target.dispatchEvent(keyupEvent);\n        }\n\n        if (transitionModifiers) {\n          this.dispatchModifierStateTransition(target, keystroke.modifiers, 0);\n        }\n      }\n\n      /**\n       * Transitions from one modifier state to another by dispatching key events.\n       *\n       * @param {EventTarget} target\n       * @param {number} fromModifierState\n       * @param {number} toModifierState\n       * @param {number} events\n       * @private\n       */\n\n    }, {\n      key: 'dispatchModifierStateTransition',\n      value: function dispatchModifierStateTransition(target, fromModifierState, toModifierState) {\n        var events = arguments.length <= 3 || arguments[3] === undefined ? KeyEvents.ALL : arguments[3];\n\n        var currentModifierState = fromModifierState;\n        var didHaveMeta = (fromModifierState & META) === META;\n        var willHaveMeta = (toModifierState & META) === META;\n        var didHaveCtrl = (fromModifierState & CTRL) === CTRL;\n        var willHaveCtrl = (toModifierState & CTRL) === CTRL;\n        var didHaveShift = (fromModifierState & SHIFT) === SHIFT;\n        var willHaveShift = (toModifierState & SHIFT) === SHIFT;\n        var didHaveAlt = (fromModifierState & ALT) === ALT;\n        var willHaveAlt = (toModifierState & ALT) === ALT;\n\n        var includeKeyUp = events & KeyEvents.UP;\n        var includeKeyDown = events & KeyEvents.DOWN;\n\n        if (includeKeyUp && didHaveMeta === true && willHaveMeta === false) {\n          // Release the meta key.\n          currentModifierState &= ~META;\n          target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.META), target));\n        }\n\n        if (includeKeyUp && didHaveCtrl === true && willHaveCtrl === false) {\n          // Release the ctrl key.\n          currentModifierState &= ~CTRL;\n          target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.CTRL), target));\n        }\n\n        if (includeKeyUp && didHaveShift === true && willHaveShift === false) {\n          // Release the shift key.\n          currentModifierState &= ~SHIFT;\n          target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.SHIFT), target));\n        }\n\n        if (includeKeyUp && didHaveAlt === true && willHaveAlt === false) {\n          // Release the alt key.\n          currentModifierState &= ~ALT;\n          target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.ALT), target));\n        }\n\n        if (includeKeyDown && didHaveMeta === false && willHaveMeta === true) {\n          // Press the meta key.\n          currentModifierState |= META;\n          target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.META), target));\n        }\n\n        if (includeKeyDown && didHaveCtrl === false && willHaveCtrl === true) {\n          // Press the ctrl key.\n          currentModifierState |= CTRL;\n          target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.CTRL), target));\n        }\n\n        if (includeKeyDown && didHaveShift === false && willHaveShift === true) {\n          // Press the shift key.\n          currentModifierState |= SHIFT;\n          target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.SHIFT), target));\n        }\n\n        if (includeKeyDown && didHaveAlt === false && willHaveAlt === true) {\n          // Press the alt key.\n          currentModifierState |= ALT;\n          target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.ALT), target));\n        }\n\n        if (currentModifierState !== toModifierState) {\n          throw new Error('internal error, expected modifier state: ' + toModifierState + (', got: ' + currentModifierState));\n        }\n      }\n\n      /**\n       * Returns the keystroke associated with the given action.\n       *\n       * @param {string} action\n       * @return {?Keystroke}\n       */\n\n    }, {\n      key: 'keystrokeForAction',\n      value: function keystrokeForAction(action) {\n        var keyCode = null;\n        var modifiers = 0;\n\n        var parts = action.split('+');\n        var lastPart = parts.pop();\n\n        parts.forEach(function (part) {\n          switch (part.toUpperCase()) {\n            case 'CTRL':\n              modifiers |= CTRL;break;\n            case 'META':\n              modifiers |= META;break;\n            case 'ALT':\n              modifiers |= ALT;break;\n            case 'SHIFT':\n              modifiers |= SHIFT;break;\n            default:\n              throw new Error('in \"' + action + '\", invalid modifier: ' + part);\n          }\n        });\n\n        if (lastPart.toUpperCase() in this._actionKeyCodeMap) {\n          keyCode = this._actionKeyCodeMap[lastPart.toUpperCase()];\n        } else if (lastPart.length === 1) {\n          var lastPartKeystroke = this.keystrokeForCharCode(lastPart.charCodeAt(0));\n          modifiers |= lastPartKeystroke.modifiers;\n          keyCode = lastPartKeystroke.keyCode;\n        } else {\n          throw new Error('in \"' + action + '\", invalid action: ' + lastPart);\n        }\n\n        return new Keystroke(modifiers, keyCode);\n      }\n\n      /**\n       * Gets the keystroke used to generate the given character code.\n       *\n       * @param {number} charCode\n       * @return {?Keystroke}\n       */\n\n    }, {\n      key: 'keystrokeForCharCode',\n      value: function keystrokeForCharCode(charCode) {\n        return this._charCodeKeyCodeMap[charCode] || null;\n      }\n\n      /**\n       * @param {EventTarget} target\n       * @private\n       */\n\n    }, {\n      key: 'targetCanReceiveTextInput',\n      value: function targetCanReceiveTextInput(target) {\n        if (!target) {\n          return false;\n        }\n\n        return isEditable(target);\n      }\n    }]);\n    return Keyboard;\n  }();\n\n  var US_ENGLISH_CHARCODE_KEYCODE_MAP = {\n    32: new Keystroke(0, 32), // <space>\n    33: new Keystroke(SHIFT, 49), // !\n    34: new Keystroke(SHIFT, 222), // \"\n    35: new Keystroke(SHIFT, 51), // #\n    36: new Keystroke(SHIFT, 52), // $\n    37: new Keystroke(SHIFT, 53), // %\n    38: new Keystroke(SHIFT, 55), // &\n    39: new Keystroke(0, 222), // '\n    40: new Keystroke(SHIFT, 57), // (\n    41: new Keystroke(SHIFT, 48), // )\n    42: new Keystroke(SHIFT, 56), // *\n    43: new Keystroke(SHIFT, 187), // +\n    44: new Keystroke(0, 188), // ,\n    45: new Keystroke(0, 189), // -\n    46: new Keystroke(0, 190), // .\n    47: new Keystroke(0, 191), // /\n    48: new Keystroke(0, 48), // 0\n    49: new Keystroke(0, 49), // 1\n    50: new Keystroke(0, 50), // 2\n    51: new Keystroke(0, 51), // 3\n    52: new Keystroke(0, 52), // 4\n    53: new Keystroke(0, 53), // 5\n    54: new Keystroke(0, 54), // 6\n    55: new Keystroke(0, 55), // 7\n    56: new Keystroke(0, 56), // 8\n    57: new Keystroke(0, 57), // 9\n    58: new Keystroke(SHIFT, 186), // :\n    59: new Keystroke(0, 186), // ;\n    60: new Keystroke(SHIFT, 188), // <\n    61: new Keystroke(0, 187), // =\n    62: new Keystroke(SHIFT, 190), // >\n    63: new Keystroke(SHIFT, 191), // ?\n    64: new Keystroke(SHIFT, 50), // @\n    65: new Keystroke(SHIFT, 65), // A\n    66: new Keystroke(SHIFT, 66), // B\n    67: new Keystroke(SHIFT, 67), // C\n    68: new Keystroke(SHIFT, 68), // D\n    69: new Keystroke(SHIFT, 69), // E\n    70: new Keystroke(SHIFT, 70), // F\n    71: new Keystroke(SHIFT, 71), // G\n    72: new Keystroke(SHIFT, 72), // H\n    73: new Keystroke(SHIFT, 73), // I\n    74: new Keystroke(SHIFT, 74), // J\n    75: new Keystroke(SHIFT, 75), // K\n    76: new Keystroke(SHIFT, 76), // L\n    77: new Keystroke(SHIFT, 77), // M\n    78: new Keystroke(SHIFT, 78), // N\n    79: new Keystroke(SHIFT, 79), // O\n    80: new Keystroke(SHIFT, 80), // P\n    81: new Keystroke(SHIFT, 81), // Q\n    82: new Keystroke(SHIFT, 82), // R\n    83: new Keystroke(SHIFT, 83), // S\n    84: new Keystroke(SHIFT, 84), // T\n    85: new Keystroke(SHIFT, 85), // U\n    86: new Keystroke(SHIFT, 86), // V\n    87: new Keystroke(SHIFT, 87), // W\n    88: new Keystroke(SHIFT, 88), // X\n    89: new Keystroke(SHIFT, 89), // Y\n    90: new Keystroke(SHIFT, 90), // Z\n    91: new Keystroke(0, 219), // [\n    92: new Keystroke(0, 220), // \\\n    93: new Keystroke(0, 221), // ]\n    96: new Keystroke(0, 192), // `\n    97: new Keystroke(0, 65), // a\n    98: new Keystroke(0, 66), // b\n    99: new Keystroke(0, 67), // c\n    100: new Keystroke(0, 68), // d\n    101: new Keystroke(0, 69), // e\n    102: new Keystroke(0, 70), // f\n    103: new Keystroke(0, 71), // g\n    104: new Keystroke(0, 72), // h\n    105: new Keystroke(0, 73), // i\n    106: new Keystroke(0, 74), // j\n    107: new Keystroke(0, 75), // k\n    108: new Keystroke(0, 76), // l\n    109: new Keystroke(0, 77), // m\n    110: new Keystroke(0, 78), // n\n    111: new Keystroke(0, 79), // o\n    112: new Keystroke(0, 80), // p\n    113: new Keystroke(0, 81), // q\n    114: new Keystroke(0, 82), // r\n    115: new Keystroke(0, 83), // s\n    116: new Keystroke(0, 84), // t\n    117: new Keystroke(0, 85), // u\n    118: new Keystroke(0, 86), // v\n    119: new Keystroke(0, 87), // w\n    120: new Keystroke(0, 88), // x\n    121: new Keystroke(0, 89), // y\n    122: new Keystroke(0, 90), // z\n    123: new Keystroke(SHIFT, 219), // {\n    124: new Keystroke(SHIFT, 220), // |\n    125: new Keystroke(SHIFT, 221), // }\n    126: new Keystroke(SHIFT, 192) // ~\n  };\n\n  var US_ENGLISH_ACTION_KEYCODE_MAP = {\n    BACKSPACE: 8,\n    TAB: 9,\n    ENTER: 13,\n    SHIFT: 16,\n    CTRL: 17,\n    ALT: 18,\n    PAUSE: 19,\n    CAPSLOCK: 20,\n    ESCAPE: 27,\n    PAGEUP: 33,\n    PAGEDOWN: 34,\n    END: 35,\n    HOME: 36,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n    INSERT: 45,\n    DELETE: 46,\n    META: 91,\n    F1: 112,\n    F2: 113,\n    F3: 114,\n    F4: 115,\n    F5: 116,\n    F6: 117,\n    F7: 118,\n    F8: 119,\n    F9: 120,\n    F10: 121,\n    F11: 122,\n    F12: 123\n  };\n\n  /**\n   * Gets a keyboard instance configured as a U.S. English keyboard would be.\n   *\n   * @return {Keyboard}\n   */\n  Keyboard.US_ENGLISH = new Keyboard(US_ENGLISH_CHARCODE_KEYCODE_MAP, US_ENGLISH_ACTION_KEYCODE_MAP);\n\n  exports.KeyEvents = KeyEvents;\n  exports.Keystroke = Keystroke;\n  exports.Keyboard = Keyboard;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n},{}],2:[function(require,module,exports){\n'use strict';\n\nvar _layoutModal = require('../blasster/_modules/layout/layoutModal');\n\nvar _layoutModal2 = _interopRequireDefault(_layoutModal);\n\nvar _tags = require('../blasster/_modules/tags/tags');\n\nvar _tags2 = _interopRequireDefault(_tags);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\nnew _layoutModal2.default();\nnew _tags2.default();\n\n},{\"../blasster/_modules/layout/layoutModal\":4,\"../blasster/_modules/tags/tags\":5}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction addClass(el, className) {\n  if (el.classList) el.classList.add(className);else if (!hasClass(el, className)) el.className += \" \" + className;\n}\n\nfunction removeClass(el, className) {\n  if (el.classList) el.classList.remove(className);else if (hasClass(el, className)) {\n    var reg = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\n    el.className = el.className.replace(reg, ' ');\n  }\n}\n\nfunction hasClass(el, className) {\n  if (el.classList) return el.classList.contains(className);else return !!el.className.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'));\n}\n\nexports.default = { addClass: addClass, removeClass: removeClass, hasClass: hasClass };\nmodule.exports = exports['default'];\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classManipulation = require('../../_js/classManipulation');\n\nvar _classManipulation2 = _interopRequireDefault(_classManipulation);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar layoutModal = function layoutModal() {\n  _classCallCheck(this, layoutModal);\n\n  var showModal = document.getElementsByClassName('show-modal');\n  var hideModal = document.getElementsByClassName('hide-modal');\n  var body = document.getElementsByTagName('body')[0];\n\n  for (var i = 0; i < showModal.length; i++) {\n    showModal[i].onclick = function (e) {\n      _classManipulation2.default.addClass(body, 'js-modal-visible');\n      var id = this.getAttribute('data-modal');\n      var target = document.getElementById(id);\n      _classManipulation2.default.addClass(target, 'js-modal-visible');\n    };\n  }\n\n  for (var i = 0; i < hideModal.length; i++) {\n    hideModal[i].onclick = function (e) {\n      _classManipulation2.default.removeClass(body, 'js-modal-visible');\n      for (var i = 0; i < document.getElementsByClassName('js-modal-visible').length; i++) {\n        if (document.getElementsByClassName('js-modal-visible')[i].getElementsByTagName(\"iframe\")[0]) {\n          var iframe = document.getElementsByClassName('js-modal-visible')[i].getElementsByTagName(\"iframe\")[0];\n          iframe.src = iframe.src;\n        }\n        _classManipulation2.default.removeClass(document.getElementsByClassName('js-modal-visible')[i], 'js-modal-visible');\n      }\n    };\n  }\n};\n\nexports.default = layoutModal;\nmodule.exports = exports['default'];\n\n},{\"../../_js/classManipulation\":3}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keysim = require('keysim');\n\nvar keysim = _interopRequireWildcard(_keysim);\n\nvar _classManipulation = require('../../_js/classManipulation');\n\nvar _classManipulation2 = _interopRequireDefault(_classManipulation);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar tags = function tags() {\n  _classCallCheck(this, tags);\n\n  var tag = document.getElementsByClassName('tag');\n  var search = document.getElementById('search');\n  for (var i = 0; i < tag.length; i++) {\n    tag[i].onclick = function (e) {\n      var value = this.getAttribute('data-value');\n      search.value = value;\n      var keyboard = keysim.Keyboard.US_ENGLISH;\n      keyboard.dispatchEventsForInput(' ', search);\n    };\n  }\n};\n\nexports.default = tags;\nmodule.exports = exports['default'];\n\n},{\"../../_js/classManipulation\":3,\"keysim\":1}]},{},[2])\n\n","'use strict';\n\nimport layoutModal from '../blasster/_modules/layout/layoutModal';\nimport tags from '../blasster/_modules/tags/tags';\n//\nnew layoutModal();\nnew tags();\n","'use strict';\n\nfunction addClass(el, className) {\n  if (el.classList)\n    el.classList.add(className)\n  else if (!hasClass(el, className)) el.className += \" \" + className\n}\n\nfunction removeClass(el, className) {\n  if (el.classList)\n    el.classList.remove(className)\n  else if (hasClass(el, className)) {\n    var reg = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)')\n    el.className=el.className.replace(reg, ' ')\n  }\n}\n\nfunction hasClass(el, className) {\n  if (el.classList)\n    return el.classList.contains(className)\n  else\n    return !!el.className.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'))\n}\n\nexport default { addClass, removeClass, hasClass }\n","'use strict';\n\nimport classManipulation from '../../_js/classManipulation'\n\nexport default class layoutModal {\n\n  constructor() {\n\n    var showModal = document.getElementsByClassName('show-modal');\n    var hideModal = document.getElementsByClassName('hide-modal');\n    var body = document.getElementsByTagName('body')[0];\n\n    for(var i = 0; i < showModal.length; i++) {\n      showModal[i].onclick = function(e) {\n        classManipulation.addClass(body, 'js-modal-visible');\n        var id = this.getAttribute('data-modal');\n        var target = document.getElementById(id);\n        classManipulation.addClass(target, 'js-modal-visible');\n      }\n    }\n\n    for(var i = 0; i < hideModal.length; i++) {\n      hideModal[i].onclick = function(e) {\n        classManipulation.removeClass(body, 'js-modal-visible');\n        for(var i = 0; i < document.getElementsByClassName('js-modal-visible').length; i++) {\n          if(document.getElementsByClassName('js-modal-visible')[i].getElementsByTagName(\"iframe\")[0]){\n            var iframe = document.getElementsByClassName('js-modal-visible')[i].getElementsByTagName(\"iframe\")[0];\n            iframe.src = iframe.src;\n          }\n          classManipulation.removeClass(document.getElementsByClassName('js-modal-visible')[i], 'js-modal-visible');\n        }\n\n      }\n    }\n\n  }\n}\n","'use strict';\n\nimport * as keysim from 'keysim';\nimport classManipulation from '../../_js/classManipulation'\n\nexport default class tags {\n\n  constructor() {\n\n    var tag = document.getElementsByClassName('tag');\n    var search = document.getElementById('search');\n    for(var i = 0; i < tag.length; i++) {\n      tag[i].onclick = function(e) {\n        var value = this.getAttribute('data-value');\n        search.value = value\n        var keyboard = keysim.Keyboard.US_ENGLISH;\n        keyboard.dispatchEventsForInput(' ', search);\n\n      }\n    }\n\n  }\n}\n"],"sourceRoot":"/source/"}